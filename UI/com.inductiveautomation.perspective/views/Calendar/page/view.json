{
  "custom": {},
  "params": {
    "dateParams": {},
    "dateTemplate": "Calendar/Day",
    "downDays": [],
    "month": 9,
    "selectedDate": 1567310400000,
    "year": 2019
  },
  "propConfig": {
    "params.dateParams": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.dateTemplate": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.downDays": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.month": {
      "onChange": {
        "enabled": null,
        "script": "\tif currentValue and origin !\u003d \u0027Script\u0027:\n\t\tif currentValue \u003c\u003d 0:\n\t\t\tyearAdjust \u003d (currentValue - 12) / 12\n\t\telse:\n\t\t\tyearAdjust \u003d (currentValue.value - 1) / 12\n\t\tif yearAdjust !\u003d 0:\n\t\t\tself.params.year +\u003d yearAdjust\n\t\t\tnewMonth \u003d currentValue.value % 12\n\t\t\tnewMonth \u003d 12 if newMonth \u003d\u003d 0 else newMonth\n\t\t\tself.params.month \u003d newMonth\n\t\t\n\t\t"
      },
      "paramDirection": "inout",
      "persistent": true
    },
    "params.selectedDate": {
      "paramDirection": "inout",
      "persistent": true
    },
    "params.year": {
      "paramDirection": "inout",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 536
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "meta": {
              "name": "Month"
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "{view.params.month}"
                  },
                  "transforms": [
                    {
                      "code": "\timport datetime\n\t# converts the number of the month to the name - year/day do not matter\n\treturn datetime.datetime(1970, value, 1).strftime(\"%B\")",
                      "type": "script"
                    }
                  ],
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "fontSize": "2.0em",
                "margin": "10px 20px"
              }
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Year"
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "path": "view.params.year"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "fontSize": "2.0em",
                "margin": "10px 20px"
              }
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "shrink": 0
        },
        "props": {
          "alignContent": "center",
          "alignItems": "center",
          "justify": "center"
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "FlexRepeater"
        },
        "position": {
          "basis": "300px",
          "grow": 1
        },
        "propConfig": {
          "props.instances": {
            "binding": {
              "config": {
                "struct": {
                  "dateParams": "{view.params.dateParams}",
                  "month": "{view.params.month}",
                  "selectedDate": "{view.params.selectedDate}",
                  "year": "{view.params.year}"
                },
                "waitOnAll": true
              },
              "transforms": [
                {
                  "code": "\t# given year/month, get days + offset\n\t# add offsets\n\t# add days\n\t# add offset\n\tcalendar \u003d []\n\t\n\t\n\tfrom calendar import monthrange\n\tdays \u003d monthrange(value.year, value.month)\n\t\n\t# days[0] \u003d starting day of week\n\t# days[1] \u003d days in month\n\tpreMonthDays \u003d (days[0] + 1) % 7\n\tmonthDays \u003d days[1]\n\tpostMonthDays \u003d (7 - ((preMonthDays + monthDays) % 7)) % 7\n\ttotalDays \u003d preMonthDays + monthDays + postMonthDays\n\t\n\ttoday \u003d system.date.toMillis(system.date.midnight(system.date.now()))\n\t\n\tbaseDay \u003d {\n\t  \"instanceStyle\": {\n\t\t\"classes\": \"\"\n\t  },\n\t  \"instancePosition\": {},\n\t  \"today\": today,\n\t  \"selectedDate\": value.selectedDate,\n\t}\n\t\n\tstartDate \u003d system.date.parse(\"%s-%s-%s\" %(value.year, value.month, 1), \"yyyy-MM-dd\")\n\tnextDate \u003d system.date.addDays(startDate, -(preMonthDays))\n\t\n\timport copy\n\tfor i in range(totalDays):\n\t\tday \u003d copy.deepcopy(baseDay)\n\t\t# system.date.getMonth seems to be zero based\n\t\tday[\u0027inMonth\u0027] \u003d (system.date.getMonth(nextDate) + 1) \u003d\u003d value.month\n\t\tday[\u0027date\u0027] \u003d system.date.toMillis(nextDate)\n\t\tday[\u0027isDownDay\u0027] \u003d day[\u0027date\u0027] in self.view.params.downDays \n\t\t\n\t\tfor k in self.view.params.dateParams:\n\t\t\tday[k] \u003d value.dateParams[k].value\n\t\tnextDate \u003d system.date.addDays(nextDate, 1)\n\t\tcalendar.append(day)\n\n\t\n\treturn calendar",
                  "type": "script"
                }
              ],
              "type": "expr-struct"
            }
          },
          "props.path": {
            "binding": {
              "config": {
                "path": "view.params.dateTemplate"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "elementPosition": {
            "basis": "14.2857%",
            "grow": 0,
            "shrink": 0
          },
          "elementStyle": {
            "width": "100%"
          },
          "useDefaultViewHeight": false,
          "useDefaultViewWidth": false,
          "wrap": "wrap"
        },
        "type": "ia.display.flex-repeater"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column"
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "calendar.dateClicked",
          "pageScope": true,
          "script": "\tif \u0027date\u0027 in payload:\n\t\tself.view.params.selectedDate \u003d payload[\u0027date\u0027]",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}