{
  "custom": {
    "eventType": 0,
    "isSelected": false,
    "isToday": false
  },
  "params": {
    "date": "",
    "inMonth": true,
    "selectedDate": "",
    "today": ""
  },
  "propConfig": {
    "custom.eventType": {
      "binding": {
        "config": {
          "expression": "{view.params.date}"
        },
        "overlayOptOut": true,
        "transforms": [
          {
            "code": "\tif not value:\n\t\treturn 0\n\tdayOfWeek \u003d system.date.getDayOfWeek(system.date.fromMillis(value))\n\tif dayOfWeek \u003d\u003d 1 or dayOfWeek \u003d\u003d 7:\n\t\treturn 0\n\t\n\tdayOfYear \u003d system.date.getDayOfYear(system.date.fromMillis(value))\n\treturn int(7 * dayOfYear + 13.0) % 20",
            "type": "script"
          }
        ],
        "type": "expr"
      },
      "persistent": true
    },
    "custom.isSelected": {
      "binding": {
        "config": {
          "struct": {
            "date": "{view.params.date}",
            "selectedDate": "{view.params.selectedDate}"
          },
          "waitOnAll": false
        },
        "overlayOptOut": true,
        "transforms": [
          {
            "code": "\tif not value.selectedDate or not value.date:\n\t\treturn False\n\t\n\tselectedDate \u003d system.date.fromMillis(value.selectedDate)\n\tdate \u003d system.date.fromMillis(value.date)\n\tisToday \u003d system.date.getYear(selectedDate) \u003d\u003d system.date.getYear(date) and \\\n\t\tsystem.date.getMonth(selectedDate) \u003d\u003d system.date.getMonth(date) and \\\n\t\tsystem.date.getDayOfMonth(selectedDate) \u003d\u003d system.date.getDayOfMonth(date)\n\treturn isToday",
            "type": "script"
          }
        ],
        "type": "expr-struct"
      },
      "persistent": true
    },
    "custom.isToday": {
      "binding": {
        "config": {
          "struct": {
            "date": "{view.params.date}",
            "today": "{view.params.today}"
          },
          "waitOnAll": false
        },
        "overlayOptOut": true,
        "transforms": [
          {
            "code": "\tif not value.date or not value.today:\n\t\treturn False\n\ttoday \u003d system.date.fromMillis(value.today)\n\tdate \u003d system.date.fromMillis(value.date)\n\tisToday \u003d system.date.getYear(today) \u003d\u003d system.date.getYear(date) and \\\n\t\tsystem.date.getMonth(today) \u003d\u003d system.date.getMonth(date) and \\\n\t\tsystem.date.getDayOfMonth(today) \u003d\u003d system.date.getDayOfMonth(date)\n\treturn isToday",
            "type": "script"
          }
        ],
        "type": "expr-struct"
      },
      "persistent": true
    },
    "params.date": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.inMonth": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.selectedDate": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.today": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 136,
      "width": 157
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Day"
        },
        "position": {
          "basis": "1em",
          "shrink": 0
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "path": "view.params.date"
              },
              "transforms": [
                {
                  "formatType": "datetime",
                  "formatValue": "dd",
                  "type": "format"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "lineHeight": "1em"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "1em",
          "grow": 1,
          "shrink": 0
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "{view.custom.eventType}"
              },
              "transforms": [
                {
                  "fallback": "",
                  "inputType": "range",
                  "mappings": [
                    {
                      "input": {
                        "max": 3,
                        "min": 1
                      },
                      "output": "Meeting at 9"
                    },
                    {
                      "input": {
                        "max": 5,
                        "min": 5
                      },
                      "output": ""
                    },
                    {
                      "input": {
                        "max": 7,
                        "min": 6
                      },
                      "output": ""
                    },
                    {
                      "input": {
                        "max": 10,
                        "min": 9
                      },
                      "output": "Down Day"
                    },
                    {
                      "input": {
                        "max": 13,
                        "min": 12
                      },
                      "output": ""
                    }
                  ],
                  "outputType": "scalar",
                  "type": "map"
                }
              ],
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "fontSize": "1em",
            "fontWeight": "bold",
            "lineHeight": "1em"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "events": {
      "dom": {
        "onClick": {
          "config": {
            "script": "\tsystem.perspective.sendMessage(\"calendar.dateClicked\", {\u0027date\u0027: self.view.params.date}, \"page\")"
          },
          "scope": "G",
          "type": "script"
        }
      }
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "props.style.backgroundColor": {
        "binding": {
          "config": {
            "expression": "if({view.custom.isSelected}, -1, if({view.params.inMonth}, {view.custom.eventType}, -2))"
          },
          "transforms": [
            {
              "fallback": "#FFFFFF",
              "inputType": "range",
              "mappings": [
                {
                  "input": {
                    "max": 3,
                    "min": 1
                  },
                  "output": "#003E6966"
                },
                {
                  "input": {
                    "max": 5,
                    "min": 5
                  },
                  "output": "#334A5B66"
                },
                {
                  "input": {
                    "max": 7,
                    "min": 6
                  },
                  "output": "#F7901E66"
                },
                {
                  "input": {
                    "max": 10,
                    "min": 9
                  },
                  "output": "#0071AC66"
                },
                {
                  "input": {
                    "max": 13,
                    "min": 12
                  },
                  "output": "#003E6966"
                },
                {
                  "input": {
                    "max": -1,
                    "min": -1
                  },
                  "output": "#8DC5FF66"
                },
                {
                  "input": {
                    "max": -2
                  },
                  "output": "#8F8F8F4D"
                }
              ],
              "outputType": "color",
              "type": "map"
            }
          ],
          "type": "expr"
        }
      },
      "props.style.border": {
        "binding": {
          "config": {
            "path": "view.custom.isToday"
          },
          "transforms": [
            {
              "fallback": "1px solid gray",
              "inputType": "scalar",
              "mappings": [
                {
                  "input": true,
                  "output": "2px solid blue"
                }
              ],
              "outputType": "scalar",
              "type": "map"
            }
          ],
          "type": "property"
        }
      }
    },
    "props": {
      "direction": "column",
      "style": {
        "overflow": "hidden",
        "padding": "2px"
      }
    },
    "type": "ia.container.flex"
  }
}